
ucnc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000924  00000998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000924  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2a  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3a  00000000  00000000  0000178a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a4  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002968  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000827b  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001dc  00000000  00000000  0000acd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000aeb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000028fa  00000000  00000000  0000aef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  ac:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  b0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000b4 <__trampolines_end>:
  b4:	04 07       	cpc	r16, r20
  b6:	02 06       	cpc	r0, r18
  b8:	00 05       	cpc	r16, r0
  ba:	01 03       	mulsu	r16, r17

000000bc <__ctors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	e4 e2       	ldi	r30, 0x24	; 36
  d0:	f9 e0       	ldi	r31, 0x09	; 9
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	a8 30       	cpi	r26, 0x08	; 8
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>
  de:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
  e2:	0c 94 90 04 	jmp	0x920	; 0x920 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z9init_uartv>:
	}
		
	//clock output register
	PORTD |= (1 << OUT_RCLK);
	PORTD &= ~(1 << OUT_RCLK);
}
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	85 ec       	ldi	r24, 0xC5	; 197
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	10 82       	st	Z, r1
  fa:	84 ec       	ldi	r24, 0xC4	; 196
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	20 e4       	ldi	r18, 0x40	; 64
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
 104:	81 ec       	ldi	r24, 0xC1	; 193
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	28 e0       	ldi	r18, 0x08	; 8
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
 10e:	82 ec       	ldi	r24, 0xC2	; 194
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	26 e0       	ldi	r18, 0x06	; 6
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
 118:	00 00       	nop
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <_Z5setupv>:
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	87 e2       	ldi	r24, 0x27	; 39
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	27 e2       	ldi	r18, 0x27	; 39
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	20 81       	ld	r18, Z
 134:	2f 61       	ori	r18, 0x1F	; 31
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	10 82       	st	Z, r1
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	28 e2       	ldi	r18, 0x28	; 40
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	20 81       	ld	r18, Z
 14e:	21 60       	ori	r18, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
 154:	88 e2       	ldi	r24, 0x28	; 40
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	28 e2       	ldi	r18, 0x28	; 40
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	27 7f       	andi	r18, 0xF7	; 247
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
 166:	8a e2       	ldi	r24, 0x2A	; 42
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	2a e2       	ldi	r18, 0x2A	; 42
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	2c 67       	ori	r18, 0x7C	; 124
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
 178:	8b e2       	ldi	r24, 0x2B	; 43
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2b e2       	ldi	r18, 0x2B	; 43
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	20 64       	ori	r18, 0x40	; 64
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
 18a:	8b e2       	ldi	r24, 0x2B	; 43
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	2b e2       	ldi	r18, 0x2B	; 43
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	20 81       	ld	r18, Z
 196:	27 7f       	andi	r18, 0xF7	; 247
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
 19c:	84 e2       	ldi	r24, 0x24	; 36
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	24 e2       	ldi	r18, 0x24	; 36
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	27 60       	ori	r18, 0x07	; 7
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	0e 94 75 00 	call	0xea	; 0xea <_Z9init_uartv>
 1b2:	00 00       	nop
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <_Z8uart_outPKc>:

void uart_out(const char* data) {
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	60 97       	sbiw	r28, 0x10	; 16
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	98 8b       	std	Y+16, r25	; 0x10
 1d0:	8f 87       	std	Y+15, r24	; 0x0f
	while(*data){
 1d2:	8f 85       	ldd	r24, Y+15	; 0x0f
 1d4:	98 89       	ldd	r25, Y+16	; 0x10
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <_Z8uart_outPKc+0x26>
 1de:	80 c0       	rjmp	.+256    	; 0x2e0 <_Z8uart_outPKc+0x126>
		UDR0 = *(data++);
 1e0:	26 ec       	ldi	r18, 0xC6	; 198
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	8f 85       	ldd	r24, Y+15	; 0x0f
 1e6:	98 89       	ldd	r25, Y+16	; 0x10
 1e8:	ac 01       	movw	r20, r24
 1ea:	4f 5f       	subi	r20, 0xFF	; 255
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	58 8b       	std	Y+16, r21	; 0x10
 1f0:	4f 87       	std	Y+15, r20	; 0x0f
 1f2:	fc 01       	movw	r30, r24
 1f4:	80 81       	ld	r24, Z
 1f6:	f9 01       	movw	r30, r18
 1f8:	80 83       	st	Z, r24
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	a0 e2       	ldi	r26, 0x20	; 32
 200:	b1 e4       	ldi	r27, 0x41	; 65
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	ab 83       	std	Y+3, r26	; 0x03
 208:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e4       	ldi	r19, 0x40	; 64
 20e:	4c e9       	ldi	r20, 0x9C	; 156
 210:	55 e4       	ldi	r21, 0x45	; 69
 212:	69 81       	ldd	r22, Y+1	; 0x01
 214:	7a 81       	ldd	r23, Y+2	; 0x02
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	9c 81       	ldd	r25, Y+4	; 0x04
 21a:	0e 94 c6 03 	call	0x78c	; 0x78c <__mulsf3>
 21e:	dc 01       	movw	r26, r24
 220:	cb 01       	movw	r24, r22
 222:	8d 83       	std	Y+5, r24	; 0x05
 224:	9e 83       	std	Y+6, r25	; 0x06
 226:	af 83       	std	Y+7, r26	; 0x07
 228:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e8       	ldi	r20, 0x80	; 128
 230:	5f e3       	ldi	r21, 0x3F	; 63
 232:	6d 81       	ldd	r22, Y+5	; 0x05
 234:	7e 81       	ldd	r23, Y+6	; 0x06
 236:	8f 81       	ldd	r24, Y+7	; 0x07
 238:	98 85       	ldd	r25, Y+8	; 0x08
 23a:	0e 94 03 03 	call	0x606	; 0x606 <__cmpsf2>
 23e:	88 23       	and	r24, r24
 240:	2c f4       	brge	.+10     	; 0x24c <_Z8uart_outPKc+0x92>
		__ticks = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	9a 87       	std	Y+10, r25	; 0x0a
 248:	89 87       	std	Y+9, r24	; 0x09
 24a:	3f c0       	rjmp	.+126    	; 0x2ca <_Z8uart_outPKc+0x110>
	else if (__tmp > 65535)
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	3f ef       	ldi	r19, 0xFF	; 255
 250:	4f e7       	ldi	r20, 0x7F	; 127
 252:	57 e4       	ldi	r21, 0x47	; 71
 254:	6d 81       	ldd	r22, Y+5	; 0x05
 256:	7e 81       	ldd	r23, Y+6	; 0x06
 258:	8f 81       	ldd	r24, Y+7	; 0x07
 25a:	98 85       	ldd	r25, Y+8	; 0x08
 25c:	0e 94 c1 03 	call	0x782	; 0x782 <__gesf2>
 260:	18 16       	cp	r1, r24
 262:	4c f5       	brge	.+82     	; 0x2b6 <_Z8uart_outPKc+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e2       	ldi	r20, 0x20	; 32
 26a:	51 e4       	ldi	r21, 0x41	; 65
 26c:	69 81       	ldd	r22, Y+1	; 0x01
 26e:	7a 81       	ldd	r23, Y+2	; 0x02
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	9c 81       	ldd	r25, Y+4	; 0x04
 274:	0e 94 c6 03 	call	0x78c	; 0x78c <__mulsf3>
 278:	dc 01       	movw	r26, r24
 27a:	cb 01       	movw	r24, r22
 27c:	bc 01       	movw	r22, r24
 27e:	cd 01       	movw	r24, r26
 280:	0e 94 08 03 	call	0x610	; 0x610 <__fixunssfsi>
 284:	dc 01       	movw	r26, r24
 286:	cb 01       	movw	r24, r22
 288:	9a 87       	std	Y+10, r25	; 0x0a
 28a:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
 28c:	89 85       	ldd	r24, Y+9	; 0x09
 28e:	9a 85       	ldd	r25, Y+10	; 0x0a
 290:	89 2b       	or	r24, r25
 292:	09 f4       	brne	.+2      	; 0x296 <_Z8uart_outPKc+0xdc>
 294:	9e cf       	rjmp	.-196    	; 0x1d2 <_Z8uart_outPKc+0x18>
 296:	84 ef       	ldi	r24, 0xF4	; 244
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	9c 87       	std	Y+12, r25	; 0x0c
 29c:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 29e:	8b 85       	ldd	r24, Y+11	; 0x0b
 2a0:	9c 85       	ldd	r25, Y+12	; 0x0c
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <_Z8uart_outPKc+0xe8>
 2a6:	9c 87       	std	Y+12, r25	; 0x0c
 2a8:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2aa:	89 85       	ldd	r24, Y+9	; 0x09
 2ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	9a 87       	std	Y+10, r25	; 0x0a
 2b2:	89 87       	std	Y+9, r24	; 0x09
 2b4:	eb cf       	rjmp	.-42     	; 0x28c <_Z8uart_outPKc+0xd2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2b6:	6d 81       	ldd	r22, Y+5	; 0x05
 2b8:	7e 81       	ldd	r23, Y+6	; 0x06
 2ba:	8f 81       	ldd	r24, Y+7	; 0x07
 2bc:	98 85       	ldd	r25, Y+8	; 0x08
 2be:	0e 94 08 03 	call	0x610	; 0x610 <__fixunssfsi>
 2c2:	dc 01       	movw	r26, r24
 2c4:	cb 01       	movw	r24, r22
 2c6:	9a 87       	std	Y+10, r25	; 0x0a
 2c8:	89 87       	std	Y+9, r24	; 0x09
 2ca:	89 85       	ldd	r24, Y+9	; 0x09
 2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ce:	9e 87       	std	Y+14, r25	; 0x0e
 2d0:	8d 87       	std	Y+13, r24	; 0x0d
 2d2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2d4:	9e 85       	ldd	r25, Y+14	; 0x0e
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <_Z8uart_outPKc+0x11c>
 2da:	9e 87       	std	Y+14, r25	; 0x0e
 2dc:	8d 87       	std	Y+13, r24	; 0x0d
	PORTD |= (1 << OUT_RCLK);
	PORTD &= ~(1 << OUT_RCLK);
}

void uart_out(const char* data) {
	while(*data){
 2de:	79 cf       	rjmp	.-270    	; 0x1d2 <_Z8uart_outPKc+0x18>
		UDR0 = *(data++);
		_delay_ms(10);
	}
}
 2e0:	00 00       	nop
 2e2:	60 96       	adiw	r28, 0x10	; 16
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <main>:

int main(void)
{
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	ad 97       	sbiw	r28, 0x2d	; 45
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
    setup();
 308:	0e 94 90 00 	call	0x120	; 0x120 <_Z5setupv>
	
	
	

	
	uint8_t value = 0;
 30c:	1a 82       	std	Y+2, r1	; 0x02

	
	
	//select internal 1.1v reference and ADC6
	ADMUX |= (1 << REFS0) | (1 << MUX2) | (1 << MUX1);
 30e:	8c e7       	ldi	r24, 0x7C	; 124
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	2c e7       	ldi	r18, 0x7C	; 124
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	f9 01       	movw	r30, r18
 318:	20 81       	ld	r18, Z
 31a:	26 64       	ori	r18, 0x46	; 70
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
	//enable ADC and set prescaler to 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2)| (1 << ADPS1)| (1 << ADPS0);
 320:	8a e7       	ldi	r24, 0x7A	; 122
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	2a e7       	ldi	r18, 0x7A	; 122
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	f9 01       	movw	r30, r18
 32a:	20 81       	ld	r18, Z
 32c:	27 68       	ori	r18, 0x87	; 135
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
	
	while (1) 
    {
		for (uint8_t s = 0; s < 8; s++)
 332:	19 82       	std	Y+1, r1	; 0x01
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	88 30       	cpi	r24, 0x08	; 8
 338:	08 f0       	brcs	.+2      	; 0x33c <main+0x48>
 33a:	60 c1       	rjmp	.+704    	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
		{
			PORTB = (uint8_t)((PORTB & (uint8_t)~0x07) | pgm_read_byte(&ASI_MAP[s]));
 33c:	85 e2       	ldi	r24, 0x25	; 37
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	25 e2       	ldi	r18, 0x25	; 37
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	f9 01       	movw	r30, r18
 346:	20 81       	ld	r18, Z
 348:	42 2f       	mov	r20, r18
 34a:	48 7f       	andi	r20, 0xF8	; 248
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	22 2f       	mov	r18, r18
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	2c 54       	subi	r18, 0x4C	; 76
 354:	3f 4f       	sbci	r19, 0xFF	; 255
 356:	3c 83       	std	Y+4, r19	; 0x04
 358:	2b 83       	std	Y+3, r18	; 0x03
 35a:	2b 81       	ldd	r18, Y+3	; 0x03
 35c:	3c 81       	ldd	r19, Y+4	; 0x04
 35e:	f9 01       	movw	r30, r18
 360:	24 91       	lpm	r18, Z
 362:	2d 83       	std	Y+5, r18	; 0x05
 364:	2d 81       	ldd	r18, Y+5	; 0x05
 366:	24 2b       	or	r18, r20
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	a0 ea       	ldi	r26, 0xA0	; 160
 372:	b0 e4       	ldi	r27, 0x40	; 64
 374:	8e 83       	std	Y+6, r24	; 0x06
 376:	9f 83       	std	Y+7, r25	; 0x07
 378:	a8 87       	std	Y+8, r26	; 0x08
 37a:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e4       	ldi	r19, 0x40	; 64
 380:	4c e9       	ldi	r20, 0x9C	; 156
 382:	55 e4       	ldi	r21, 0x45	; 69
 384:	6e 81       	ldd	r22, Y+6	; 0x06
 386:	7f 81       	ldd	r23, Y+7	; 0x07
 388:	88 85       	ldd	r24, Y+8	; 0x08
 38a:	99 85       	ldd	r25, Y+9	; 0x09
 38c:	0e 94 c6 03 	call	0x78c	; 0x78c <__mulsf3>
 390:	dc 01       	movw	r26, r24
 392:	cb 01       	movw	r24, r22
 394:	8a 8f       	std	Y+26, r24	; 0x1a
 396:	9b 8f       	std	Y+27, r25	; 0x1b
 398:	ac 8f       	std	Y+28, r26	; 0x1c
 39a:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 e8       	ldi	r20, 0x80	; 128
 3a2:	5f e3       	ldi	r21, 0x3F	; 63
 3a4:	6a 8d       	ldd	r22, Y+26	; 0x1a
 3a6:	7b 8d       	ldd	r23, Y+27	; 0x1b
 3a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
 3ac:	0e 94 03 03 	call	0x606	; 0x606 <__cmpsf2>
 3b0:	88 23       	and	r24, r24
 3b2:	2c f4       	brge	.+10     	; 0x3be <main+0xca>
		__ticks = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	9f 8f       	std	Y+31, r25	; 0x1f
 3ba:	8e 8f       	std	Y+30, r24	; 0x1e
 3bc:	3e c0       	rjmp	.+124    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	else if (__tmp > 65535)
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	3f ef       	ldi	r19, 0xFF	; 255
 3c2:	4f e7       	ldi	r20, 0x7F	; 127
 3c4:	57 e4       	ldi	r21, 0x47	; 71
 3c6:	6a 8d       	ldd	r22, Y+26	; 0x1a
 3c8:	7b 8d       	ldd	r23, Y+27	; 0x1b
 3ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
 3ce:	0e 94 c1 03 	call	0x782	; 0x782 <__gesf2>
 3d2:	18 16       	cp	r1, r24
 3d4:	44 f5       	brge	.+80     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	40 e2       	ldi	r20, 0x20	; 32
 3dc:	51 e4       	ldi	r21, 0x41	; 65
 3de:	6e 81       	ldd	r22, Y+6	; 0x06
 3e0:	7f 81       	ldd	r23, Y+7	; 0x07
 3e2:	88 85       	ldd	r24, Y+8	; 0x08
 3e4:	99 85       	ldd	r25, Y+9	; 0x09
 3e6:	0e 94 c6 03 	call	0x78c	; 0x78c <__mulsf3>
 3ea:	dc 01       	movw	r26, r24
 3ec:	cb 01       	movw	r24, r22
 3ee:	bc 01       	movw	r22, r24
 3f0:	cd 01       	movw	r24, r26
 3f2:	0e 94 08 03 	call	0x610	; 0x610 <__fixunssfsi>
 3f6:	dc 01       	movw	r26, r24
 3f8:	cb 01       	movw	r24, r22
 3fa:	9f 8f       	std	Y+31, r25	; 0x1f
 3fc:	8e 8f       	std	Y+30, r24	; 0x1e
		while(__ticks)
 3fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
 400:	9f 8d       	ldd	r25, Y+31	; 0x1f
 402:	89 2b       	or	r24, r25
 404:	21 f1       	breq	.+72     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 406:	84 ef       	ldi	r24, 0xF4	; 244
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	99 a3       	std	Y+33, r25	; 0x21
 40c:	88 a3       	std	Y+32, r24	; 0x20
 40e:	88 a1       	ldd	r24, Y+32	; 0x20
 410:	99 a1       	ldd	r25, Y+33	; 0x21
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	99 a3       	std	Y+33, r25	; 0x21
 418:	88 a3       	std	Y+32, r24	; 0x20
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 41a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 41c:	9f 8d       	ldd	r25, Y+31	; 0x1f
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	9f 8f       	std	Y+31, r25	; 0x1f
 422:	8e 8f       	std	Y+30, r24	; 0x1e
 424:	ec cf       	rjmp	.-40     	; 0x3fe <main+0x10a>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 426:	6a 8d       	ldd	r22, Y+26	; 0x1a
 428:	7b 8d       	ldd	r23, Y+27	; 0x1b
 42a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 42c:	9d 8d       	ldd	r25, Y+29	; 0x1d
 42e:	0e 94 08 03 	call	0x610	; 0x610 <__fixunssfsi>
 432:	dc 01       	movw	r26, r24
 434:	cb 01       	movw	r24, r22
 436:	9f 8f       	std	Y+31, r25	; 0x1f
 438:	8e 8f       	std	Y+30, r24	; 0x1e
 43a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 43c:	9f 8d       	ldd	r25, Y+31	; 0x1f
 43e:	9b a3       	std	Y+35, r25	; 0x23
 440:	8a a3       	std	Y+34, r24	; 0x22
 442:	8a a1       	ldd	r24, Y+34	; 0x22
 444:	9b a1       	ldd	r25, Y+35	; 0x23
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44a:	9b a3       	std	Y+35, r25	; 0x23
 44c:	8a a3       	std	Y+34, r24	; 0x22
			_delay_ms(5);
					

			ADCSRA |= (1 << ADSC);
 44e:	8a e7       	ldi	r24, 0x7A	; 122
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	2a e7       	ldi	r18, 0x7A	; 122
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	f9 01       	movw	r30, r18
 458:	20 81       	ld	r18, Z
 45a:	20 64       	ori	r18, 0x40	; 64
 45c:	fc 01       	movw	r30, r24
 45e:	20 83       	st	Z, r18
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	a0 ea       	ldi	r26, 0xA0	; 160
 466:	b0 e4       	ldi	r27, 0x40	; 64
 468:	8c 87       	std	Y+12, r24	; 0x0c
 46a:	9d 87       	std	Y+13, r25	; 0x0d
 46c:	ae 87       	std	Y+14, r26	; 0x0e
 46e:	bf 87       	std	Y+15, r27	; 0x0f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e4       	ldi	r19, 0x40	; 64
 474:	4c e9       	ldi	r20, 0x9C	; 156
 476:	55 e4       	ldi	r21, 0x45	; 69
 478:	6c 85       	ldd	r22, Y+12	; 0x0c
 47a:	7d 85       	ldd	r23, Y+13	; 0x0d
 47c:	8e 85       	ldd	r24, Y+14	; 0x0e
 47e:	9f 85       	ldd	r25, Y+15	; 0x0f
 480:	0e 94 c6 03 	call	0x78c	; 0x78c <__mulsf3>
 484:	dc 01       	movw	r26, r24
 486:	cb 01       	movw	r24, r22
 488:	88 8b       	std	Y+16, r24	; 0x10
 48a:	99 8b       	std	Y+17, r25	; 0x11
 48c:	aa 8b       	std	Y+18, r26	; 0x12
 48e:	bb 8b       	std	Y+19, r27	; 0x13
	if (__tmp < 1.0)
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	40 e8       	ldi	r20, 0x80	; 128
 496:	5f e3       	ldi	r21, 0x3F	; 63
 498:	68 89       	ldd	r22, Y+16	; 0x10
 49a:	79 89       	ldd	r23, Y+17	; 0x11
 49c:	8a 89       	ldd	r24, Y+18	; 0x12
 49e:	9b 89       	ldd	r25, Y+19	; 0x13
 4a0:	0e 94 03 03 	call	0x606	; 0x606 <__cmpsf2>
 4a4:	88 23       	and	r24, r24
 4a6:	2c f4       	brge	.+10     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		__ticks = 1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	9d 8b       	std	Y+21, r25	; 0x15
 4ae:	8c 8b       	std	Y+20, r24	; 0x14
 4b0:	3e c0       	rjmp	.+124    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
	else if (__tmp > 65535)
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	3f ef       	ldi	r19, 0xFF	; 255
 4b6:	4f e7       	ldi	r20, 0x7F	; 127
 4b8:	57 e4       	ldi	r21, 0x47	; 71
 4ba:	68 89       	ldd	r22, Y+16	; 0x10
 4bc:	79 89       	ldd	r23, Y+17	; 0x11
 4be:	8a 89       	ldd	r24, Y+18	; 0x12
 4c0:	9b 89       	ldd	r25, Y+19	; 0x13
 4c2:	0e 94 c1 03 	call	0x782	; 0x782 <__gesf2>
 4c6:	18 16       	cp	r1, r24
 4c8:	44 f5       	brge	.+80     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	40 e2       	ldi	r20, 0x20	; 32
 4d0:	51 e4       	ldi	r21, 0x41	; 65
 4d2:	6c 85       	ldd	r22, Y+12	; 0x0c
 4d4:	7d 85       	ldd	r23, Y+13	; 0x0d
 4d6:	8e 85       	ldd	r24, Y+14	; 0x0e
 4d8:	9f 85       	ldd	r25, Y+15	; 0x0f
 4da:	0e 94 c6 03 	call	0x78c	; 0x78c <__mulsf3>
 4de:	dc 01       	movw	r26, r24
 4e0:	cb 01       	movw	r24, r22
 4e2:	bc 01       	movw	r22, r24
 4e4:	cd 01       	movw	r24, r26
 4e6:	0e 94 08 03 	call	0x610	; 0x610 <__fixunssfsi>
 4ea:	dc 01       	movw	r26, r24
 4ec:	cb 01       	movw	r24, r22
 4ee:	9d 8b       	std	Y+21, r25	; 0x15
 4f0:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
 4f2:	8c 89       	ldd	r24, Y+20	; 0x14
 4f4:	9d 89       	ldd	r25, Y+21	; 0x15
 4f6:	89 2b       	or	r24, r25
 4f8:	21 f1       	breq	.+72     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 4fa:	84 ef       	ldi	r24, 0xF4	; 244
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	9f 8b       	std	Y+23, r25	; 0x17
 500:	8e 8b       	std	Y+22, r24	; 0x16
 502:	8e 89       	ldd	r24, Y+22	; 0x16
 504:	9f 89       	ldd	r25, Y+23	; 0x17
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 50a:	9f 8b       	std	Y+23, r25	; 0x17
 50c:	8e 8b       	std	Y+22, r24	; 0x16
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 50e:	8c 89       	ldd	r24, Y+20	; 0x14
 510:	9d 89       	ldd	r25, Y+21	; 0x15
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	9d 8b       	std	Y+21, r25	; 0x15
 516:	8c 8b       	std	Y+20, r24	; 0x14
 518:	ec cf       	rjmp	.-40     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 51a:	68 89       	ldd	r22, Y+16	; 0x10
 51c:	79 89       	ldd	r23, Y+17	; 0x11
 51e:	8a 89       	ldd	r24, Y+18	; 0x12
 520:	9b 89       	ldd	r25, Y+19	; 0x13
 522:	0e 94 08 03 	call	0x610	; 0x610 <__fixunssfsi>
 526:	dc 01       	movw	r26, r24
 528:	cb 01       	movw	r24, r22
 52a:	9d 8b       	std	Y+21, r25	; 0x15
 52c:	8c 8b       	std	Y+20, r24	; 0x14
 52e:	8c 89       	ldd	r24, Y+20	; 0x14
 530:	9d 89       	ldd	r25, Y+21	; 0x15
 532:	99 8f       	std	Y+25, r25	; 0x19
 534:	88 8f       	std	Y+24, r24	; 0x18
 536:	88 8d       	ldd	r24, Y+24	; 0x18
 538:	99 8d       	ldd	r25, Y+25	; 0x19
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 53e:	99 8f       	std	Y+25, r25	; 0x19
 540:	88 8f       	std	Y+24, r24	; 0x18
			_delay_ms(5);

			uint16_t av = ADCL;
 542:	88 e7       	ldi	r24, 0x78	; 120
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	80 81       	ld	r24, Z
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	9b 87       	std	Y+11, r25	; 0x0b
 550:	8a 87       	std	Y+10, r24	; 0x0a
			av |= (uint16_t)(ADCH << 8);
 552:	89 e7       	ldi	r24, 0x79	; 121
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	fc 01       	movw	r30, r24
 558:	80 81       	ld	r24, Z
 55a:	88 2f       	mov	r24, r24
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	98 2f       	mov	r25, r24
 560:	88 27       	eor	r24, r24
 562:	9c 01       	movw	r18, r24
 564:	8a 85       	ldd	r24, Y+10	; 0x0a
 566:	9b 85       	ldd	r25, Y+11	; 0x0b
 568:	82 2b       	or	r24, r18
 56a:	93 2b       	or	r25, r19
 56c:	9b 87       	std	Y+11, r25	; 0x0b
 56e:	8a 87       	std	Y+10, r24	; 0x0a
			av = (uint16_t)((100.0 / 1024.0) * av);
 570:	8a 85       	ldd	r24, Y+10	; 0x0a
 572:	9b 85       	ldd	r25, Y+11	; 0x0b
 574:	cc 01       	movw	r24, r24
 576:	a0 e0       	ldi	r26, 0x00	; 0
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	bc 01       	movw	r22, r24
 57c:	cd 01       	movw	r24, r26
 57e:	0e 94 37 03 	call	0x66e	; 0x66e <__floatunsisf>
 582:	dc 01       	movw	r26, r24
 584:	cb 01       	movw	r24, r22
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	48 ec       	ldi	r20, 0xC8	; 200
 58c:	5d e3       	ldi	r21, 0x3D	; 61
 58e:	bc 01       	movw	r22, r24
 590:	cd 01       	movw	r24, r26
 592:	0e 94 c6 03 	call	0x78c	; 0x78c <__mulsf3>
 596:	dc 01       	movw	r26, r24
 598:	cb 01       	movw	r24, r22
 59a:	bc 01       	movw	r22, r24
 59c:	cd 01       	movw	r24, r26
 59e:	0e 94 08 03 	call	0x610	; 0x610 <__fixunssfsi>
 5a2:	dc 01       	movw	r26, r24
 5a4:	cb 01       	movw	r24, r22
 5a6:	9b 87       	std	Y+11, r25	; 0x0b
 5a8:	8a 87       	std	Y+10, r24	; 0x0a

			char buffer[10];
			
			utoa(s, buffer, 10);
 5aa:	89 81       	ldd	r24, Y+1	; 0x01
 5ac:	88 2f       	mov	r24, r24
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	9e 01       	movw	r18, r28
 5b2:	2c 5d       	subi	r18, 0xDC	; 220
 5b4:	3f 4f       	sbci	r19, 0xFF	; 255
 5b6:	4a e0       	ldi	r20, 0x0A	; 10
 5b8:	50 e0       	ldi	r21, 0x00	; 0
 5ba:	b9 01       	movw	r22, r18
 5bc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <utoa>
			uart_out(buffer);
 5c0:	ce 01       	movw	r24, r28
 5c2:	84 96       	adiw	r24, 0x24	; 36
 5c4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z8uart_outPKc>
			
			uart_out(": ");
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z8uart_outPKc>
			
			utoa(av, buffer, 10);
 5d0:	9e 01       	movw	r18, r28
 5d2:	2c 5d       	subi	r18, 0xDC	; 220
 5d4:	3f 4f       	sbci	r19, 0xFF	; 255
 5d6:	8a 85       	ldd	r24, Y+10	; 0x0a
 5d8:	9b 85       	ldd	r25, Y+11	; 0x0b
 5da:	4a e0       	ldi	r20, 0x0A	; 10
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	b9 01       	movw	r22, r18
 5e0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <utoa>
			uart_out(buffer);
 5e4:	ce 01       	movw	r24, r28
 5e6:	84 96       	adiw	r24, 0x24	; 36
 5e8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z8uart_outPKc>
			
			uart_out(" ");
 5ec:	83 e0       	ldi	r24, 0x03	; 3
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z8uart_outPKc>
	//enable ADC and set prescaler to 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2)| (1 << ADPS1)| (1 << ADPS0);
	
	while (1) 
    {
		for (uint8_t s = 0; s < 8; s++)
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	89 83       	std	Y+1, r24	; 0x01
 5fa:	9c ce       	rjmp	.-712    	; 0x334 <main+0x40>
		//_delay_ms(100);
		
		}
		
		
		uart_out("\r\n");
 5fc:	85 e0       	ldi	r24, 0x05	; 5
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z8uart_outPKc>
	//select internal 1.1v reference and ADC6
	ADMUX |= (1 << REFS0) | (1 << MUX2) | (1 << MUX1);
	//enable ADC and set prescaler to 128
	ADCSRA |= (1 << ADEN) | (1 << ADPS2)| (1 << ADPS1)| (1 << ADPS0);
	
	while (1) 
 604:	96 ce       	rjmp	.-724    	; 0x332 <main+0x3e>

00000606 <__cmpsf2>:
 606:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_cmp>
 60a:	08 f4       	brcc	.+2      	; 0x60e <__cmpsf2+0x8>
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	08 95       	ret

00000610 <__fixunssfsi>:
 610:	0e 94 a0 03 	call	0x740	; 0x740 <__fp_splitA>
 614:	88 f0       	brcs	.+34     	; 0x638 <__fixunssfsi+0x28>
 616:	9f 57       	subi	r25, 0x7F	; 127
 618:	98 f0       	brcs	.+38     	; 0x640 <__fixunssfsi+0x30>
 61a:	b9 2f       	mov	r27, r25
 61c:	99 27       	eor	r25, r25
 61e:	b7 51       	subi	r27, 0x17	; 23
 620:	b0 f0       	brcs	.+44     	; 0x64e <__fixunssfsi+0x3e>
 622:	e1 f0       	breq	.+56     	; 0x65c <__fixunssfsi+0x4c>
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	1a f0       	brmi	.+6      	; 0x634 <__fixunssfsi+0x24>
 62e:	ba 95       	dec	r27
 630:	c9 f7       	brne	.-14     	; 0x624 <__fixunssfsi+0x14>
 632:	14 c0       	rjmp	.+40     	; 0x65c <__fixunssfsi+0x4c>
 634:	b1 30       	cpi	r27, 0x01	; 1
 636:	91 f0       	breq	.+36     	; 0x65c <__fixunssfsi+0x4c>
 638:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_zero>
 63c:	b1 e0       	ldi	r27, 0x01	; 1
 63e:	08 95       	ret
 640:	0c 94 ba 03 	jmp	0x774	; 0x774 <__fp_zero>
 644:	67 2f       	mov	r22, r23
 646:	78 2f       	mov	r23, r24
 648:	88 27       	eor	r24, r24
 64a:	b8 5f       	subi	r27, 0xF8	; 248
 64c:	39 f0       	breq	.+14     	; 0x65c <__fixunssfsi+0x4c>
 64e:	b9 3f       	cpi	r27, 0xF9	; 249
 650:	cc f3       	brlt	.-14     	; 0x644 <__fixunssfsi+0x34>
 652:	86 95       	lsr	r24
 654:	77 95       	ror	r23
 656:	67 95       	ror	r22
 658:	b3 95       	inc	r27
 65a:	d9 f7       	brne	.-10     	; 0x652 <__fixunssfsi+0x42>
 65c:	3e f4       	brtc	.+14     	; 0x66c <__fixunssfsi+0x5c>
 65e:	90 95       	com	r25
 660:	80 95       	com	r24
 662:	70 95       	com	r23
 664:	61 95       	neg	r22
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	08 95       	ret

0000066e <__floatunsisf>:
 66e:	e8 94       	clt
 670:	09 c0       	rjmp	.+18     	; 0x684 <__floatsisf+0x12>

00000672 <__floatsisf>:
 672:	97 fb       	bst	r25, 7
 674:	3e f4       	brtc	.+14     	; 0x684 <__floatsisf+0x12>
 676:	90 95       	com	r25
 678:	80 95       	com	r24
 67a:	70 95       	com	r23
 67c:	61 95       	neg	r22
 67e:	7f 4f       	sbci	r23, 0xFF	; 255
 680:	8f 4f       	sbci	r24, 0xFF	; 255
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	99 23       	and	r25, r25
 686:	a9 f0       	breq	.+42     	; 0x6b2 <__floatsisf+0x40>
 688:	f9 2f       	mov	r31, r25
 68a:	96 e9       	ldi	r25, 0x96	; 150
 68c:	bb 27       	eor	r27, r27
 68e:	93 95       	inc	r25
 690:	f6 95       	lsr	r31
 692:	87 95       	ror	r24
 694:	77 95       	ror	r23
 696:	67 95       	ror	r22
 698:	b7 95       	ror	r27
 69a:	f1 11       	cpse	r31, r1
 69c:	f8 cf       	rjmp	.-16     	; 0x68e <__floatsisf+0x1c>
 69e:	fa f4       	brpl	.+62     	; 0x6de <__floatsisf+0x6c>
 6a0:	bb 0f       	add	r27, r27
 6a2:	11 f4       	brne	.+4      	; 0x6a8 <__floatsisf+0x36>
 6a4:	60 ff       	sbrs	r22, 0
 6a6:	1b c0       	rjmp	.+54     	; 0x6de <__floatsisf+0x6c>
 6a8:	6f 5f       	subi	r22, 0xFF	; 255
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
 6ac:	8f 4f       	sbci	r24, 0xFF	; 255
 6ae:	9f 4f       	sbci	r25, 0xFF	; 255
 6b0:	16 c0       	rjmp	.+44     	; 0x6de <__floatsisf+0x6c>
 6b2:	88 23       	and	r24, r24
 6b4:	11 f0       	breq	.+4      	; 0x6ba <__floatsisf+0x48>
 6b6:	96 e9       	ldi	r25, 0x96	; 150
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <__floatsisf+0x6a>
 6ba:	77 23       	and	r23, r23
 6bc:	21 f0       	breq	.+8      	; 0x6c6 <__floatsisf+0x54>
 6be:	9e e8       	ldi	r25, 0x8E	; 142
 6c0:	87 2f       	mov	r24, r23
 6c2:	76 2f       	mov	r23, r22
 6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <__floatsisf+0x5e>
 6c6:	66 23       	and	r22, r22
 6c8:	71 f0       	breq	.+28     	; 0x6e6 <__floatsisf+0x74>
 6ca:	96 e8       	ldi	r25, 0x86	; 134
 6cc:	86 2f       	mov	r24, r22
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	2a f0       	brmi	.+10     	; 0x6de <__floatsisf+0x6c>
 6d4:	9a 95       	dec	r25
 6d6:	66 0f       	add	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	da f7       	brpl	.-10     	; 0x6d4 <__floatsisf+0x62>
 6de:	88 0f       	add	r24, r24
 6e0:	96 95       	lsr	r25
 6e2:	87 95       	ror	r24
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <__fp_cmp>:
 6e8:	99 0f       	add	r25, r25
 6ea:	00 08       	sbc	r0, r0
 6ec:	55 0f       	add	r21, r21
 6ee:	aa 0b       	sbc	r26, r26
 6f0:	e0 e8       	ldi	r30, 0x80	; 128
 6f2:	fe ef       	ldi	r31, 0xFE	; 254
 6f4:	16 16       	cp	r1, r22
 6f6:	17 06       	cpc	r1, r23
 6f8:	e8 07       	cpc	r30, r24
 6fa:	f9 07       	cpc	r31, r25
 6fc:	c0 f0       	brcs	.+48     	; 0x72e <__fp_cmp+0x46>
 6fe:	12 16       	cp	r1, r18
 700:	13 06       	cpc	r1, r19
 702:	e4 07       	cpc	r30, r20
 704:	f5 07       	cpc	r31, r21
 706:	98 f0       	brcs	.+38     	; 0x72e <__fp_cmp+0x46>
 708:	62 1b       	sub	r22, r18
 70a:	73 0b       	sbc	r23, r19
 70c:	84 0b       	sbc	r24, r20
 70e:	95 0b       	sbc	r25, r21
 710:	39 f4       	brne	.+14     	; 0x720 <__fp_cmp+0x38>
 712:	0a 26       	eor	r0, r26
 714:	61 f0       	breq	.+24     	; 0x72e <__fp_cmp+0x46>
 716:	23 2b       	or	r18, r19
 718:	24 2b       	or	r18, r20
 71a:	25 2b       	or	r18, r21
 71c:	21 f4       	brne	.+8      	; 0x726 <__fp_cmp+0x3e>
 71e:	08 95       	ret
 720:	0a 26       	eor	r0, r26
 722:	09 f4       	brne	.+2      	; 0x726 <__fp_cmp+0x3e>
 724:	a1 40       	sbci	r26, 0x01	; 1
 726:	a6 95       	lsr	r26
 728:	8f ef       	ldi	r24, 0xFF	; 255
 72a:	81 1d       	adc	r24, r1
 72c:	81 1d       	adc	r24, r1
 72e:	08 95       	ret

00000730 <__fp_split3>:
 730:	57 fd       	sbrc	r21, 7
 732:	90 58       	subi	r25, 0x80	; 128
 734:	44 0f       	add	r20, r20
 736:	55 1f       	adc	r21, r21
 738:	59 f0       	breq	.+22     	; 0x750 <__fp_splitA+0x10>
 73a:	5f 3f       	cpi	r21, 0xFF	; 255
 73c:	71 f0       	breq	.+28     	; 0x75a <__fp_splitA+0x1a>
 73e:	47 95       	ror	r20

00000740 <__fp_splitA>:
 740:	88 0f       	add	r24, r24
 742:	97 fb       	bst	r25, 7
 744:	99 1f       	adc	r25, r25
 746:	61 f0       	breq	.+24     	; 0x760 <__fp_splitA+0x20>
 748:	9f 3f       	cpi	r25, 0xFF	; 255
 74a:	79 f0       	breq	.+30     	; 0x76a <__fp_splitA+0x2a>
 74c:	87 95       	ror	r24
 74e:	08 95       	ret
 750:	12 16       	cp	r1, r18
 752:	13 06       	cpc	r1, r19
 754:	14 06       	cpc	r1, r20
 756:	55 1f       	adc	r21, r21
 758:	f2 cf       	rjmp	.-28     	; 0x73e <__fp_split3+0xe>
 75a:	46 95       	lsr	r20
 75c:	f1 df       	rcall	.-30     	; 0x740 <__fp_splitA>
 75e:	08 c0       	rjmp	.+16     	; 0x770 <__fp_splitA+0x30>
 760:	16 16       	cp	r1, r22
 762:	17 06       	cpc	r1, r23
 764:	18 06       	cpc	r1, r24
 766:	99 1f       	adc	r25, r25
 768:	f1 cf       	rjmp	.-30     	; 0x74c <__fp_splitA+0xc>
 76a:	86 95       	lsr	r24
 76c:	71 05       	cpc	r23, r1
 76e:	61 05       	cpc	r22, r1
 770:	08 94       	sec
 772:	08 95       	ret

00000774 <__fp_zero>:
 774:	e8 94       	clt

00000776 <__fp_szero>:
 776:	bb 27       	eor	r27, r27
 778:	66 27       	eor	r22, r22
 77a:	77 27       	eor	r23, r23
 77c:	cb 01       	movw	r24, r22
 77e:	97 f9       	bld	r25, 7
 780:	08 95       	ret

00000782 <__gesf2>:
 782:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_cmp>
 786:	08 f4       	brcc	.+2      	; 0x78a <__gesf2+0x8>
 788:	8f ef       	ldi	r24, 0xFF	; 255
 78a:	08 95       	ret

0000078c <__mulsf3>:
 78c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__mulsf3x>
 790:	0c 94 4a 04 	jmp	0x894	; 0x894 <__fp_round>
 794:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_pscA>
 798:	38 f0       	brcs	.+14     	; 0x7a8 <__mulsf3+0x1c>
 79a:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscB>
 79e:	20 f0       	brcs	.+8      	; 0x7a8 <__mulsf3+0x1c>
 7a0:	95 23       	and	r25, r21
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <__mulsf3+0x1c>
 7a4:	0c 94 33 04 	jmp	0x866	; 0x866 <__fp_inf>
 7a8:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_nan>
 7ac:	11 24       	eor	r1, r1
 7ae:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_szero>

000007b2 <__mulsf3x>:
 7b2:	0e 94 98 03 	call	0x730	; 0x730 <__fp_split3>
 7b6:	70 f3       	brcs	.-36     	; 0x794 <__mulsf3+0x8>

000007b8 <__mulsf3_pse>:
 7b8:	95 9f       	mul	r25, r21
 7ba:	c1 f3       	breq	.-16     	; 0x7ac <__mulsf3+0x20>
 7bc:	95 0f       	add	r25, r21
 7be:	50 e0       	ldi	r21, 0x00	; 0
 7c0:	55 1f       	adc	r21, r21
 7c2:	62 9f       	mul	r22, r18
 7c4:	f0 01       	movw	r30, r0
 7c6:	72 9f       	mul	r23, r18
 7c8:	bb 27       	eor	r27, r27
 7ca:	f0 0d       	add	r31, r0
 7cc:	b1 1d       	adc	r27, r1
 7ce:	63 9f       	mul	r22, r19
 7d0:	aa 27       	eor	r26, r26
 7d2:	f0 0d       	add	r31, r0
 7d4:	b1 1d       	adc	r27, r1
 7d6:	aa 1f       	adc	r26, r26
 7d8:	64 9f       	mul	r22, r20
 7da:	66 27       	eor	r22, r22
 7dc:	b0 0d       	add	r27, r0
 7de:	a1 1d       	adc	r26, r1
 7e0:	66 1f       	adc	r22, r22
 7e2:	82 9f       	mul	r24, r18
 7e4:	22 27       	eor	r18, r18
 7e6:	b0 0d       	add	r27, r0
 7e8:	a1 1d       	adc	r26, r1
 7ea:	62 1f       	adc	r22, r18
 7ec:	73 9f       	mul	r23, r19
 7ee:	b0 0d       	add	r27, r0
 7f0:	a1 1d       	adc	r26, r1
 7f2:	62 1f       	adc	r22, r18
 7f4:	83 9f       	mul	r24, r19
 7f6:	a0 0d       	add	r26, r0
 7f8:	61 1d       	adc	r22, r1
 7fa:	22 1f       	adc	r18, r18
 7fc:	74 9f       	mul	r23, r20
 7fe:	33 27       	eor	r19, r19
 800:	a0 0d       	add	r26, r0
 802:	61 1d       	adc	r22, r1
 804:	23 1f       	adc	r18, r19
 806:	84 9f       	mul	r24, r20
 808:	60 0d       	add	r22, r0
 80a:	21 1d       	adc	r18, r1
 80c:	82 2f       	mov	r24, r18
 80e:	76 2f       	mov	r23, r22
 810:	6a 2f       	mov	r22, r26
 812:	11 24       	eor	r1, r1
 814:	9f 57       	subi	r25, 0x7F	; 127
 816:	50 40       	sbci	r21, 0x00	; 0
 818:	9a f0       	brmi	.+38     	; 0x840 <__mulsf3_pse+0x88>
 81a:	f1 f0       	breq	.+60     	; 0x858 <__mulsf3_pse+0xa0>
 81c:	88 23       	and	r24, r24
 81e:	4a f0       	brmi	.+18     	; 0x832 <__mulsf3_pse+0x7a>
 820:	ee 0f       	add	r30, r30
 822:	ff 1f       	adc	r31, r31
 824:	bb 1f       	adc	r27, r27
 826:	66 1f       	adc	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	91 50       	subi	r25, 0x01	; 1
 82e:	50 40       	sbci	r21, 0x00	; 0
 830:	a9 f7       	brne	.-22     	; 0x81c <__mulsf3_pse+0x64>
 832:	9e 3f       	cpi	r25, 0xFE	; 254
 834:	51 05       	cpc	r21, r1
 836:	80 f0       	brcs	.+32     	; 0x858 <__mulsf3_pse+0xa0>
 838:	0c 94 33 04 	jmp	0x866	; 0x866 <__fp_inf>
 83c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_szero>
 840:	5f 3f       	cpi	r21, 0xFF	; 255
 842:	e4 f3       	brlt	.-8      	; 0x83c <__mulsf3_pse+0x84>
 844:	98 3e       	cpi	r25, 0xE8	; 232
 846:	d4 f3       	brlt	.-12     	; 0x83c <__mulsf3_pse+0x84>
 848:	86 95       	lsr	r24
 84a:	77 95       	ror	r23
 84c:	67 95       	ror	r22
 84e:	b7 95       	ror	r27
 850:	f7 95       	ror	r31
 852:	e7 95       	ror	r30
 854:	9f 5f       	subi	r25, 0xFF	; 255
 856:	c1 f7       	brne	.-16     	; 0x848 <__mulsf3_pse+0x90>
 858:	fe 2b       	or	r31, r30
 85a:	88 0f       	add	r24, r24
 85c:	91 1d       	adc	r25, r1
 85e:	96 95       	lsr	r25
 860:	87 95       	ror	r24
 862:	97 f9       	bld	r25, 7
 864:	08 95       	ret

00000866 <__fp_inf>:
 866:	97 f9       	bld	r25, 7
 868:	9f 67       	ori	r25, 0x7F	; 127
 86a:	80 e8       	ldi	r24, 0x80	; 128
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	08 95       	ret

00000872 <__fp_nan>:
 872:	9f ef       	ldi	r25, 0xFF	; 255
 874:	80 ec       	ldi	r24, 0xC0	; 192
 876:	08 95       	ret

00000878 <__fp_pscA>:
 878:	00 24       	eor	r0, r0
 87a:	0a 94       	dec	r0
 87c:	16 16       	cp	r1, r22
 87e:	17 06       	cpc	r1, r23
 880:	18 06       	cpc	r1, r24
 882:	09 06       	cpc	r0, r25
 884:	08 95       	ret

00000886 <__fp_pscB>:
 886:	00 24       	eor	r0, r0
 888:	0a 94       	dec	r0
 88a:	12 16       	cp	r1, r18
 88c:	13 06       	cpc	r1, r19
 88e:	14 06       	cpc	r1, r20
 890:	05 06       	cpc	r0, r21
 892:	08 95       	ret

00000894 <__fp_round>:
 894:	09 2e       	mov	r0, r25
 896:	03 94       	inc	r0
 898:	00 0c       	add	r0, r0
 89a:	11 f4       	brne	.+4      	; 0x8a0 <__fp_round+0xc>
 89c:	88 23       	and	r24, r24
 89e:	52 f0       	brmi	.+20     	; 0x8b4 <__fp_round+0x20>
 8a0:	bb 0f       	add	r27, r27
 8a2:	40 f4       	brcc	.+16     	; 0x8b4 <__fp_round+0x20>
 8a4:	bf 2b       	or	r27, r31
 8a6:	11 f4       	brne	.+4      	; 0x8ac <__fp_round+0x18>
 8a8:	60 ff       	sbrs	r22, 0
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__fp_round+0x20>
 8ac:	6f 5f       	subi	r22, 0xFF	; 255
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	08 95       	ret

000008b6 <utoa>:
 8b6:	45 32       	cpi	r20, 0x25	; 37
 8b8:	51 05       	cpc	r21, r1
 8ba:	20 f4       	brcc	.+8      	; 0x8c4 <utoa+0xe>
 8bc:	42 30       	cpi	r20, 0x02	; 2
 8be:	10 f0       	brcs	.+4      	; 0x8c4 <utoa+0xe>
 8c0:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__utoa_ncheck>
 8c4:	fb 01       	movw	r30, r22
 8c6:	10 82       	st	Z, r1
 8c8:	cb 01       	movw	r24, r22
 8ca:	08 95       	ret

000008cc <__utoa_ncheck>:
 8cc:	bb 27       	eor	r27, r27

000008ce <__utoa_common>:
 8ce:	fb 01       	movw	r30, r22
 8d0:	55 27       	eor	r21, r21
 8d2:	aa 27       	eor	r26, r26
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	aa 1f       	adc	r26, r26
 8da:	a4 17       	cp	r26, r20
 8dc:	10 f0       	brcs	.+4      	; 0x8e2 <__utoa_common+0x14>
 8de:	a4 1b       	sub	r26, r20
 8e0:	83 95       	inc	r24
 8e2:	50 51       	subi	r21, 0x10	; 16
 8e4:	b9 f7       	brne	.-18     	; 0x8d4 <__utoa_common+0x6>
 8e6:	a0 5d       	subi	r26, 0xD0	; 208
 8e8:	aa 33       	cpi	r26, 0x3A	; 58
 8ea:	08 f0       	brcs	.+2      	; 0x8ee <__utoa_common+0x20>
 8ec:	a9 5d       	subi	r26, 0xD9	; 217
 8ee:	a1 93       	st	Z+, r26
 8f0:	00 97       	sbiw	r24, 0x00	; 0
 8f2:	79 f7       	brne	.-34     	; 0x8d2 <__utoa_common+0x4>
 8f4:	b1 11       	cpse	r27, r1
 8f6:	b1 93       	st	Z+, r27
 8f8:	11 92       	st	Z+, r1
 8fa:	cb 01       	movw	r24, r22
 8fc:	0c 94 80 04 	jmp	0x900	; 0x900 <strrev>

00000900 <strrev>:
 900:	dc 01       	movw	r26, r24
 902:	fc 01       	movw	r30, r24
 904:	67 2f       	mov	r22, r23
 906:	71 91       	ld	r23, Z+
 908:	77 23       	and	r23, r23
 90a:	e1 f7       	brne	.-8      	; 0x904 <strrev+0x4>
 90c:	32 97       	sbiw	r30, 0x02	; 2
 90e:	04 c0       	rjmp	.+8      	; 0x918 <strrev+0x18>
 910:	7c 91       	ld	r23, X
 912:	6d 93       	st	X+, r22
 914:	70 83       	st	Z, r23
 916:	62 91       	ld	r22, -Z
 918:	ae 17       	cp	r26, r30
 91a:	bf 07       	cpc	r27, r31
 91c:	c8 f3       	brcs	.-14     	; 0x910 <strrev+0x10>
 91e:	08 95       	ret

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>

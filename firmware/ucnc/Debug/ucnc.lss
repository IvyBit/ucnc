
ucnc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000784  000007f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000784  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b82  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b2  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000066e  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  0000245c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006c25  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00009135  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000928e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000025f6  00000000  00000000  000092be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e8       	ldi	r30, 0x84	; 132
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 04 02 	call	0x408	; 0x408 <main>
  da:	0c 94 c0 03 	jmp	0x780	; 0x780 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <_Z5setupv>:
#define	OUT_RCLK	(PIND4)
#define	OUT_SRCLK	(PIND5)
#define	OUT_SRCLR	(PIND6)


void setup(){
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	
	//make PINC0-4 outputs
	DDRC |= ((1 << IN_SRCLR) | (1 << IN_SRCLK) | (1 << IN_RCLK) | (1 << IN_OE) | (1 << IN_SER));
  ea:	87 e2       	ldi	r24, 0x27	; 39
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	27 e2       	ldi	r18, 0x27	; 39
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	2f 61       	ori	r18, 0x1F	; 31
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
	PORTC = 0x00;	
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	10 82       	st	Z, r1
	//disable input clear
	PORTC |= (1 << IN_SRCLR);
 104:	88 e2       	ldi	r24, 0x28	; 40
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	28 e2       	ldi	r18, 0x28	; 40
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	21 60       	ori	r18, 0x01	; 1
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
	//enable input indicators
	PORTC &= ~(1 << IN_OE);
 116:	88 e2       	ldi	r24, 0x28	; 40
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	28 e2       	ldi	r18, 0x28	; 40
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	27 7f       	andi	r18, 0xF7	; 247
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
	
	//make PIND2-6 outputs
	DDRD |= ((1 << OUT_SER) | (1 << OUT_OE) | (1 << OUT_RCLK) | (1 << OUT_SRCLK) | (1 << OUT_SRCLR));
 128:	8a e2       	ldi	r24, 0x2A	; 42
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	2a e2       	ldi	r18, 0x2A	; 42
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	20 81       	ld	r18, Z
 134:	2c 67       	ori	r18, 0x7C	; 124
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
	//disable output clear
	PORTD |= (1 << OUT_SRCLR);
 13a:	8b e2       	ldi	r24, 0x2B	; 43
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	2b e2       	ldi	r18, 0x2B	; 43
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	f9 01       	movw	r30, r18
 144:	20 81       	ld	r18, Z
 146:	20 64       	ori	r18, 0x40	; 64
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
	//enable outputs
	PORTD &= ~(1 << OUT_OE);
 14c:	8b e2       	ldi	r24, 0x2B	; 43
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	2b e2       	ldi	r18, 0x2B	; 43
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	27 7f       	andi	r18, 0xF7	; 247
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
}
 15e:	00 00       	nop
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <_Z20set_input_indicatorsh>:

void set_input_indicators(uint8_t indicators){
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <_Z20set_input_indicatorsh+0x6>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	8a 83       	std	Y+2, r24	; 0x02
	
	for (uint8_t i = 0; i < 8; i++)
 172:	19 82       	std	Y+1, r1	; 0x01
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	c0 f5       	brcc	.+112    	; 0x1ea <_Z20set_input_indicatorsh+0x84>
	{
		//shift value into register
		if(((indicators >> i) & 0x01)){
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	29 81       	ldd	r18, Y+1	; 0x01
 182:	22 2f       	mov	r18, r18
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <_Z20set_input_indicatorsh+0x26>
 188:	95 95       	asr	r25
 18a:	87 95       	ror	r24
 18c:	2a 95       	dec	r18
 18e:	e2 f7       	brpl	.-8      	; 0x188 <_Z20set_input_indicatorsh+0x22>
 190:	81 70       	andi	r24, 0x01	; 1
 192:	99 27       	eor	r25, r25
 194:	89 2b       	or	r24, r25
 196:	51 f0       	breq	.+20     	; 0x1ac <_Z20set_input_indicatorsh+0x46>
			PORTC |= (1 << IN_SER);
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	28 e2       	ldi	r18, 0x28	; 40
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	20 61       	ori	r18, 0x10	; 16
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
 1aa:	09 c0       	rjmp	.+18     	; 0x1be <_Z20set_input_indicatorsh+0x58>
		}else{
			PORTC &= ~(1 << IN_SER);
 1ac:	88 e2       	ldi	r24, 0x28	; 40
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	28 e2       	ldi	r18, 0x28	; 40
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	f9 01       	movw	r30, r18
 1b6:	20 81       	ld	r18, Z
 1b8:	2f 7e       	andi	r18, 0xEF	; 239
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
		}
		//clock register
		PORTC |= (1 << IN_SRCLK);
 1be:	88 e2       	ldi	r24, 0x28	; 40
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	28 e2       	ldi	r18, 0x28	; 40
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	f9 01       	movw	r30, r18
 1c8:	20 81       	ld	r18, Z
 1ca:	22 60       	ori	r18, 0x02	; 2
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
		PORTC &= ~(1 << IN_SRCLK);
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	28 e2       	ldi	r18, 0x28	; 40
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	20 81       	ld	r18, Z
 1dc:	2d 7f       	andi	r18, 0xFD	; 253
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
	PORTD &= ~(1 << OUT_OE);
}

void set_input_indicators(uint8_t indicators){
	
	for (uint8_t i = 0; i < 8; i++)
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	c5 cf       	rjmp	.-118    	; 0x174 <_Z20set_input_indicatorsh+0xe>
		PORTC |= (1 << IN_SRCLK);
		PORTC &= ~(1 << IN_SRCLK);
	}	
	
	//clock output register
	PORTC |= (1 << IN_RCLK);
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	28 e2       	ldi	r18, 0x28	; 40
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	24 60       	ori	r18, 0x04	; 4
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
	PORTC &= ~(1 << IN_RCLK);	
 1fc:	88 e2       	ldi	r24, 0x28	; 40
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	28 e2       	ldi	r18, 0x28	; 40
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	2b 7f       	andi	r18, 0xFB	; 251
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
}
 20e:	00 00       	nop
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <_Z11set_outputsh>:

void set_outputs(uint8_t outputs){
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	00 d0       	rcall	.+0      	; 0x220 <_Z11set_outputsh+0x6>
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i = 0; i < 8; i++)
 226:	19 82       	std	Y+1, r1	; 0x01
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	c0 f5       	brcc	.+112    	; 0x29e <_Z11set_outputsh+0x84>
	{
		//shift value into register
		if(((outputs >> i) & 0x01)){
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	88 2f       	mov	r24, r24
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	29 81       	ldd	r18, Y+1	; 0x01
 236:	22 2f       	mov	r18, r18
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <_Z11set_outputsh+0x26>
 23c:	95 95       	asr	r25
 23e:	87 95       	ror	r24
 240:	2a 95       	dec	r18
 242:	e2 f7       	brpl	.-8      	; 0x23c <_Z11set_outputsh+0x22>
 244:	81 70       	andi	r24, 0x01	; 1
 246:	99 27       	eor	r25, r25
 248:	89 2b       	or	r24, r25
 24a:	51 f0       	breq	.+20     	; 0x260 <_Z11set_outputsh+0x46>
			PORTD |= (1 << OUT_SER);
 24c:	8b e2       	ldi	r24, 0x2B	; 43
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	2b e2       	ldi	r18, 0x2B	; 43
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	f9 01       	movw	r30, r18
 256:	20 81       	ld	r18, Z
 258:	24 60       	ori	r18, 0x04	; 4
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
 25e:	09 c0       	rjmp	.+18     	; 0x272 <_Z11set_outputsh+0x58>
			}else{
			PORTD &= ~(1 << OUT_SER);
 260:	8b e2       	ldi	r24, 0x2B	; 43
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	2b e2       	ldi	r18, 0x2B	; 43
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	f9 01       	movw	r30, r18
 26a:	20 81       	ld	r18, Z
 26c:	2b 7f       	andi	r18, 0xFB	; 251
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
		}
		//clock register
		PORTD |= (1 << OUT_SRCLK);
 272:	8b e2       	ldi	r24, 0x2B	; 43
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	2b e2       	ldi	r18, 0x2B	; 43
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	f9 01       	movw	r30, r18
 27c:	20 81       	ld	r18, Z
 27e:	20 62       	ori	r18, 0x20	; 32
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
		PORTD &= ~(1 << OUT_SRCLK);
 284:	8b e2       	ldi	r24, 0x2B	; 43
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	2b e2       	ldi	r18, 0x2B	; 43
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	20 81       	ld	r18, Z
 290:	2f 7d       	andi	r18, 0xDF	; 223
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
	PORTC |= (1 << IN_RCLK);
	PORTC &= ~(1 << IN_RCLK);	
}

void set_outputs(uint8_t outputs){
	for (uint8_t i = 0; i < 8; i++)
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	c5 cf       	rjmp	.-118    	; 0x228 <_Z11set_outputsh+0xe>
		PORTD |= (1 << OUT_SRCLK);
		PORTD &= ~(1 << OUT_SRCLK);
	}
		
	//clock output register
	PORTD |= (1 << OUT_RCLK);
 29e:	8b e2       	ldi	r24, 0x2B	; 43
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	2b e2       	ldi	r18, 0x2B	; 43
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	f9 01       	movw	r30, r18
 2a8:	20 81       	ld	r18, Z
 2aa:	20 61       	ori	r18, 0x10	; 16
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
	PORTD &= ~(1 << OUT_RCLK);
 2b0:	8b e2       	ldi	r24, 0x2B	; 43
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	2b e2       	ldi	r18, 0x2B	; 43
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	2f 7e       	andi	r18, 0xEF	; 239
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
}
 2c2:	00 00       	nop
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <_Z8uart_outPKc>:

void uart_out(const char* data) {
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	60 97       	sbiw	r28, 0x10	; 16
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61
 2e2:	98 8b       	std	Y+16, r25	; 0x10
 2e4:	8f 87       	std	Y+15, r24	; 0x0f
	while(*data){
 2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
 2e8:	98 89       	ldd	r25, Y+16	; 0x10
 2ea:	fc 01       	movw	r30, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	88 23       	and	r24, r24
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <_Z8uart_outPKc+0x26>
 2f2:	80 c0       	rjmp	.+256    	; 0x3f4 <_Z8uart_outPKc+0x126>
		UDR0 = *(data++);
 2f4:	26 ec       	ldi	r18, 0xC6	; 198
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	8f 85       	ldd	r24, Y+15	; 0x0f
 2fa:	98 89       	ldd	r25, Y+16	; 0x10
 2fc:	ac 01       	movw	r20, r24
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	58 8b       	std	Y+16, r21	; 0x10
 304:	4f 87       	std	Y+15, r20	; 0x0f
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z
 30a:	f9 01       	movw	r30, r18
 30c:	80 83       	st	Z, r24
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	a8 ec       	ldi	r26, 0xC8	; 200
 314:	b2 e4       	ldi	r27, 0x42	; 66
 316:	89 83       	std	Y+1, r24	; 0x01
 318:	9a 83       	std	Y+2, r25	; 0x02
 31a:	ab 83       	std	Y+3, r26	; 0x03
 31c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e4       	ldi	r19, 0x40	; 64
 322:	4c e9       	ldi	r20, 0x9C	; 156
 324:	55 e4       	ldi	r21, 0x45	; 69
 326:	69 81       	ldd	r22, Y+1	; 0x01
 328:	7a 81       	ldd	r23, Y+2	; 0x02
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	9c 81       	ldd	r25, Y+4	; 0x04
 32e:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 332:	dc 01       	movw	r26, r24
 334:	cb 01       	movw	r24, r22
 336:	8d 83       	std	Y+5, r24	; 0x05
 338:	9e 83       	std	Y+6, r25	; 0x06
 33a:	af 83       	std	Y+7, r26	; 0x07
 33c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	40 e8       	ldi	r20, 0x80	; 128
 344:	5f e3       	ldi	r21, 0x3F	; 63
 346:	6d 81       	ldd	r22, Y+5	; 0x05
 348:	7e 81       	ldd	r23, Y+6	; 0x06
 34a:	8f 81       	ldd	r24, Y+7	; 0x07
 34c:	98 85       	ldd	r25, Y+8	; 0x08
 34e:	0e 94 a5 02 	call	0x54a	; 0x54a <__cmpsf2>
 352:	88 23       	and	r24, r24
 354:	2c f4       	brge	.+10     	; 0x360 <_Z8uart_outPKc+0x92>
		__ticks = 1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	9a 87       	std	Y+10, r25	; 0x0a
 35c:	89 87       	std	Y+9, r24	; 0x09
 35e:	3f c0       	rjmp	.+126    	; 0x3de <_Z8uart_outPKc+0x110>
	else if (__tmp > 65535)
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	3f ef       	ldi	r19, 0xFF	; 255
 364:	4f e7       	ldi	r20, 0x7F	; 127
 366:	57 e4       	ldi	r21, 0x47	; 71
 368:	6d 81       	ldd	r22, Y+5	; 0x05
 36a:	7e 81       	ldd	r23, Y+6	; 0x06
 36c:	8f 81       	ldd	r24, Y+7	; 0x07
 36e:	98 85       	ldd	r25, Y+8	; 0x08
 370:	0e 94 26 03 	call	0x64c	; 0x64c <__gesf2>
 374:	18 16       	cp	r1, r24
 376:	4c f5       	brge	.+82     	; 0x3ca <_Z8uart_outPKc+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e2       	ldi	r20, 0x20	; 32
 37e:	51 e4       	ldi	r21, 0x41	; 65
 380:	69 81       	ldd	r22, Y+1	; 0x01
 382:	7a 81       	ldd	r23, Y+2	; 0x02
 384:	8b 81       	ldd	r24, Y+3	; 0x03
 386:	9c 81       	ldd	r25, Y+4	; 0x04
 388:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 38c:	dc 01       	movw	r26, r24
 38e:	cb 01       	movw	r24, r22
 390:	bc 01       	movw	r22, r24
 392:	cd 01       	movw	r24, r26
 394:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 398:	dc 01       	movw	r26, r24
 39a:	cb 01       	movw	r24, r22
 39c:	9a 87       	std	Y+10, r25	; 0x0a
 39e:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
 3a0:	89 85       	ldd	r24, Y+9	; 0x09
 3a2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3a4:	89 2b       	or	r24, r25
 3a6:	09 f4       	brne	.+2      	; 0x3aa <_Z8uart_outPKc+0xdc>
 3a8:	9e cf       	rjmp	.-196    	; 0x2e6 <_Z8uart_outPKc+0x18>
 3aa:	84 ef       	ldi	r24, 0xF4	; 244
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	9c 87       	std	Y+12, r25	; 0x0c
 3b0:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 3b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 3b4:	9c 85       	ldd	r25, Y+12	; 0x0c
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <_Z8uart_outPKc+0xe8>
 3ba:	9c 87       	std	Y+12, r25	; 0x0c
 3bc:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3be:	89 85       	ldd	r24, Y+9	; 0x09
 3c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	9a 87       	std	Y+10, r25	; 0x0a
 3c6:	89 87       	std	Y+9, r24	; 0x09
 3c8:	eb cf       	rjmp	.-42     	; 0x3a0 <_Z8uart_outPKc+0xd2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3ca:	6d 81       	ldd	r22, Y+5	; 0x05
 3cc:	7e 81       	ldd	r23, Y+6	; 0x06
 3ce:	8f 81       	ldd	r24, Y+7	; 0x07
 3d0:	98 85       	ldd	r25, Y+8	; 0x08
 3d2:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 3d6:	dc 01       	movw	r26, r24
 3d8:	cb 01       	movw	r24, r22
 3da:	9a 87       	std	Y+10, r25	; 0x0a
 3dc:	89 87       	std	Y+9, r24	; 0x09
 3de:	89 85       	ldd	r24, Y+9	; 0x09
 3e0:	9a 85       	ldd	r25, Y+10	; 0x0a
 3e2:	9e 87       	std	Y+14, r25	; 0x0e
 3e4:	8d 87       	std	Y+13, r24	; 0x0d
 3e6:	8d 85       	ldd	r24, Y+13	; 0x0d
 3e8:	9e 85       	ldd	r25, Y+14	; 0x0e
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <_Z8uart_outPKc+0x11c>
 3ee:	9e 87       	std	Y+14, r25	; 0x0e
 3f0:	8d 87       	std	Y+13, r24	; 0x0d
	PORTD |= (1 << OUT_RCLK);
	PORTD &= ~(1 << OUT_RCLK);
}

void uart_out(const char* data) {
	while(*data){
 3f2:	79 cf       	rjmp	.-270    	; 0x2e6 <_Z8uart_outPKc+0x18>
		UDR0 = *(data++);
		_delay_ms(100);
	}
}
 3f4:	00 00       	nop
 3f6:	60 96       	adiw	r28, 0x10	; 16
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <main>:

int main(void)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	2f 97       	sbiw	r28, 0x0f	; 15
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
    setup();
 41c:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z5setupv>
	
	UBRR0H = (uint8_t)(CUBRR >> 8);
 420:	85 ec       	ldi	r24, 0xC5	; 197
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	fc 01       	movw	r30, r24
 426:	10 82       	st	Z, r1
	UBRR0L = (uint8_t)(CUBRR);
 428:	84 ec       	ldi	r24, 0xC4	; 196
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	20 e4       	ldi	r18, 0x40	; 64
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
	UCSR0B =  (1 << TXEN0);
 432:	81 ec       	ldi	r24, 0xC1	; 193
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	28 e0       	ldi	r18, 0x08	; 8
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 43c:	82 ec       	ldi	r24, 0xC2	; 194
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	26 e0       	ldi	r18, 0x06	; 6
 442:	fc 01       	movw	r30, r24
 444:	20 83       	st	Z, r18
	

	
	uint8_t value = 0;
 446:	19 82       	std	Y+1, r1	; 0x01
	
	while (1) 
    {
			uart_out("Hello World!\r\n");
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z8uart_outPKc>
			
		set_input_indicators(value);
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	0e 94 b3 00 	call	0x166	; 0x166 <_Z20set_input_indicatorsh>
		set_outputs(~value);
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	80 95       	com	r24
 45a:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z11set_outputsh>
		value++;
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	89 83       	std	Y+1, r24	; 0x01
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	aa e7       	ldi	r26, 0x7A	; 122
 46a:	b3 e4       	ldi	r27, 0x43	; 67
 46c:	8a 83       	std	Y+2, r24	; 0x02
 46e:	9b 83       	std	Y+3, r25	; 0x03
 470:	ac 83       	std	Y+4, r26	; 0x04
 472:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e4       	ldi	r19, 0x40	; 64
 478:	4c e9       	ldi	r20, 0x9C	; 156
 47a:	55 e4       	ldi	r21, 0x45	; 69
 47c:	6a 81       	ldd	r22, Y+2	; 0x02
 47e:	7b 81       	ldd	r23, Y+3	; 0x03
 480:	8c 81       	ldd	r24, Y+4	; 0x04
 482:	9d 81       	ldd	r25, Y+5	; 0x05
 484:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 488:	dc 01       	movw	r26, r24
 48a:	cb 01       	movw	r24, r22
 48c:	8e 83       	std	Y+6, r24	; 0x06
 48e:	9f 83       	std	Y+7, r25	; 0x07
 490:	a8 87       	std	Y+8, r26	; 0x08
 492:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	40 e8       	ldi	r20, 0x80	; 128
 49a:	5f e3       	ldi	r21, 0x3F	; 63
 49c:	6e 81       	ldd	r22, Y+6	; 0x06
 49e:	7f 81       	ldd	r23, Y+7	; 0x07
 4a0:	88 85       	ldd	r24, Y+8	; 0x08
 4a2:	99 85       	ldd	r25, Y+9	; 0x09
 4a4:	0e 94 a5 02 	call	0x54a	; 0x54a <__cmpsf2>
 4a8:	88 23       	and	r24, r24
 4aa:	2c f4       	brge	.+10     	; 0x4b6 <main+0xae>
		__ticks = 1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	9b 87       	std	Y+11, r25	; 0x0b
 4b2:	8a 87       	std	Y+10, r24	; 0x0a
 4b4:	3f c0       	rjmp	.+126    	; 0x534 <main+0x12c>
	else if (__tmp > 65535)
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	3f ef       	ldi	r19, 0xFF	; 255
 4ba:	4f e7       	ldi	r20, 0x7F	; 127
 4bc:	57 e4       	ldi	r21, 0x47	; 71
 4be:	6e 81       	ldd	r22, Y+6	; 0x06
 4c0:	7f 81       	ldd	r23, Y+7	; 0x07
 4c2:	88 85       	ldd	r24, Y+8	; 0x08
 4c4:	99 85       	ldd	r25, Y+9	; 0x09
 4c6:	0e 94 26 03 	call	0x64c	; 0x64c <__gesf2>
 4ca:	18 16       	cp	r1, r24
 4cc:	4c f5       	brge	.+82     	; 0x520 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e2       	ldi	r20, 0x20	; 32
 4d4:	51 e4       	ldi	r21, 0x41	; 65
 4d6:	6a 81       	ldd	r22, Y+2	; 0x02
 4d8:	7b 81       	ldd	r23, Y+3	; 0x03
 4da:	8c 81       	ldd	r24, Y+4	; 0x04
 4dc:	9d 81       	ldd	r25, Y+5	; 0x05
 4de:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 4e2:	dc 01       	movw	r26, r24
 4e4:	cb 01       	movw	r24, r22
 4e6:	bc 01       	movw	r22, r24
 4e8:	cd 01       	movw	r24, r26
 4ea:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 4ee:	dc 01       	movw	r26, r24
 4f0:	cb 01       	movw	r24, r22
 4f2:	9b 87       	std	Y+11, r25	; 0x0b
 4f4:	8a 87       	std	Y+10, r24	; 0x0a
		while(__ticks)
 4f6:	8a 85       	ldd	r24, Y+10	; 0x0a
 4f8:	9b 85       	ldd	r25, Y+11	; 0x0b
 4fa:	89 2b       	or	r24, r25
 4fc:	09 f4       	brne	.+2      	; 0x500 <main+0xf8>
 4fe:	a4 cf       	rjmp	.-184    	; 0x448 <main+0x40>
 500:	84 ef       	ldi	r24, 0xF4	; 244
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	9d 87       	std	Y+13, r25	; 0x0d
 506:	8c 87       	std	Y+12, r24	; 0x0c
 508:	8c 85       	ldd	r24, Y+12	; 0x0c
 50a:	9d 85       	ldd	r25, Y+13	; 0x0d
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <main+0x104>
 510:	9d 87       	std	Y+13, r25	; 0x0d
 512:	8c 87       	std	Y+12, r24	; 0x0c
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 514:	8a 85       	ldd	r24, Y+10	; 0x0a
 516:	9b 85       	ldd	r25, Y+11	; 0x0b
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	9b 87       	std	Y+11, r25	; 0x0b
 51c:	8a 87       	std	Y+10, r24	; 0x0a
 51e:	eb cf       	rjmp	.-42     	; 0x4f6 <main+0xee>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 520:	6e 81       	ldd	r22, Y+6	; 0x06
 522:	7f 81       	ldd	r23, Y+7	; 0x07
 524:	88 85       	ldd	r24, Y+8	; 0x08
 526:	99 85       	ldd	r25, Y+9	; 0x09
 528:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 52c:	dc 01       	movw	r26, r24
 52e:	cb 01       	movw	r24, r22
 530:	9b 87       	std	Y+11, r25	; 0x0b
 532:	8a 87       	std	Y+10, r24	; 0x0a
 534:	8a 85       	ldd	r24, Y+10	; 0x0a
 536:	9b 85       	ldd	r25, Y+11	; 0x0b
 538:	9f 87       	std	Y+15, r25	; 0x0f
 53a:	8e 87       	std	Y+14, r24	; 0x0e
 53c:	8e 85       	ldd	r24, Y+14	; 0x0e
 53e:	9f 85       	ldd	r25, Y+15	; 0x0f
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <main+0x138>
 544:	9f 87       	std	Y+15, r25	; 0x0f
 546:	8e 87       	std	Y+14, r24	; 0x0e
	

	
	uint8_t value = 0;
	
	while (1) 
 548:	7f cf       	rjmp	.-258    	; 0x448 <main+0x40>

0000054a <__cmpsf2>:
 54a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_cmp>
 54e:	08 f4       	brcc	.+2      	; 0x552 <__cmpsf2+0x8>
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	08 95       	ret

00000554 <__fixunssfsi>:
 554:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_splitA>
 558:	88 f0       	brcs	.+34     	; 0x57c <__fixunssfsi+0x28>
 55a:	9f 57       	subi	r25, 0x7F	; 127
 55c:	98 f0       	brcs	.+38     	; 0x584 <__fixunssfsi+0x30>
 55e:	b9 2f       	mov	r27, r25
 560:	99 27       	eor	r25, r25
 562:	b7 51       	subi	r27, 0x17	; 23
 564:	b0 f0       	brcs	.+44     	; 0x592 <__fixunssfsi+0x3e>
 566:	e1 f0       	breq	.+56     	; 0x5a0 <__fixunssfsi+0x4c>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	1a f0       	brmi	.+6      	; 0x578 <__fixunssfsi+0x24>
 572:	ba 95       	dec	r27
 574:	c9 f7       	brne	.-14     	; 0x568 <__fixunssfsi+0x14>
 576:	14 c0       	rjmp	.+40     	; 0x5a0 <__fixunssfsi+0x4c>
 578:	b1 30       	cpi	r27, 0x01	; 1
 57a:	91 f0       	breq	.+36     	; 0x5a0 <__fixunssfsi+0x4c>
 57c:	0e 94 1f 03 	call	0x63e	; 0x63e <__fp_zero>
 580:	b1 e0       	ldi	r27, 0x01	; 1
 582:	08 95       	ret
 584:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_zero>
 588:	67 2f       	mov	r22, r23
 58a:	78 2f       	mov	r23, r24
 58c:	88 27       	eor	r24, r24
 58e:	b8 5f       	subi	r27, 0xF8	; 248
 590:	39 f0       	breq	.+14     	; 0x5a0 <__fixunssfsi+0x4c>
 592:	b9 3f       	cpi	r27, 0xF9	; 249
 594:	cc f3       	brlt	.-14     	; 0x588 <__fixunssfsi+0x34>
 596:	86 95       	lsr	r24
 598:	77 95       	ror	r23
 59a:	67 95       	ror	r22
 59c:	b3 95       	inc	r27
 59e:	d9 f7       	brne	.-10     	; 0x596 <__fixunssfsi+0x42>
 5a0:	3e f4       	brtc	.+14     	; 0x5b0 <__fixunssfsi+0x5c>
 5a2:	90 95       	com	r25
 5a4:	80 95       	com	r24
 5a6:	70 95       	com	r23
 5a8:	61 95       	neg	r22
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	8f 4f       	sbci	r24, 0xFF	; 255
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	08 95       	ret

000005b2 <__fp_cmp>:
 5b2:	99 0f       	add	r25, r25
 5b4:	00 08       	sbc	r0, r0
 5b6:	55 0f       	add	r21, r21
 5b8:	aa 0b       	sbc	r26, r26
 5ba:	e0 e8       	ldi	r30, 0x80	; 128
 5bc:	fe ef       	ldi	r31, 0xFE	; 254
 5be:	16 16       	cp	r1, r22
 5c0:	17 06       	cpc	r1, r23
 5c2:	e8 07       	cpc	r30, r24
 5c4:	f9 07       	cpc	r31, r25
 5c6:	c0 f0       	brcs	.+48     	; 0x5f8 <__fp_cmp+0x46>
 5c8:	12 16       	cp	r1, r18
 5ca:	13 06       	cpc	r1, r19
 5cc:	e4 07       	cpc	r30, r20
 5ce:	f5 07       	cpc	r31, r21
 5d0:	98 f0       	brcs	.+38     	; 0x5f8 <__fp_cmp+0x46>
 5d2:	62 1b       	sub	r22, r18
 5d4:	73 0b       	sbc	r23, r19
 5d6:	84 0b       	sbc	r24, r20
 5d8:	95 0b       	sbc	r25, r21
 5da:	39 f4       	brne	.+14     	; 0x5ea <__fp_cmp+0x38>
 5dc:	0a 26       	eor	r0, r26
 5de:	61 f0       	breq	.+24     	; 0x5f8 <__fp_cmp+0x46>
 5e0:	23 2b       	or	r18, r19
 5e2:	24 2b       	or	r18, r20
 5e4:	25 2b       	or	r18, r21
 5e6:	21 f4       	brne	.+8      	; 0x5f0 <__fp_cmp+0x3e>
 5e8:	08 95       	ret
 5ea:	0a 26       	eor	r0, r26
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <__fp_cmp+0x3e>
 5ee:	a1 40       	sbci	r26, 0x01	; 1
 5f0:	a6 95       	lsr	r26
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	81 1d       	adc	r24, r1
 5f6:	81 1d       	adc	r24, r1
 5f8:	08 95       	ret

000005fa <__fp_split3>:
 5fa:	57 fd       	sbrc	r21, 7
 5fc:	90 58       	subi	r25, 0x80	; 128
 5fe:	44 0f       	add	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	59 f0       	breq	.+22     	; 0x61a <__fp_splitA+0x10>
 604:	5f 3f       	cpi	r21, 0xFF	; 255
 606:	71 f0       	breq	.+28     	; 0x624 <__fp_splitA+0x1a>
 608:	47 95       	ror	r20

0000060a <__fp_splitA>:
 60a:	88 0f       	add	r24, r24
 60c:	97 fb       	bst	r25, 7
 60e:	99 1f       	adc	r25, r25
 610:	61 f0       	breq	.+24     	; 0x62a <__fp_splitA+0x20>
 612:	9f 3f       	cpi	r25, 0xFF	; 255
 614:	79 f0       	breq	.+30     	; 0x634 <__fp_splitA+0x2a>
 616:	87 95       	ror	r24
 618:	08 95       	ret
 61a:	12 16       	cp	r1, r18
 61c:	13 06       	cpc	r1, r19
 61e:	14 06       	cpc	r1, r20
 620:	55 1f       	adc	r21, r21
 622:	f2 cf       	rjmp	.-28     	; 0x608 <__fp_split3+0xe>
 624:	46 95       	lsr	r20
 626:	f1 df       	rcall	.-30     	; 0x60a <__fp_splitA>
 628:	08 c0       	rjmp	.+16     	; 0x63a <__fp_splitA+0x30>
 62a:	16 16       	cp	r1, r22
 62c:	17 06       	cpc	r1, r23
 62e:	18 06       	cpc	r1, r24
 630:	99 1f       	adc	r25, r25
 632:	f1 cf       	rjmp	.-30     	; 0x616 <__fp_splitA+0xc>
 634:	86 95       	lsr	r24
 636:	71 05       	cpc	r23, r1
 638:	61 05       	cpc	r22, r1
 63a:	08 94       	sec
 63c:	08 95       	ret

0000063e <__fp_zero>:
 63e:	e8 94       	clt

00000640 <__fp_szero>:
 640:	bb 27       	eor	r27, r27
 642:	66 27       	eor	r22, r22
 644:	77 27       	eor	r23, r23
 646:	cb 01       	movw	r24, r22
 648:	97 f9       	bld	r25, 7
 64a:	08 95       	ret

0000064c <__gesf2>:
 64c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_cmp>
 650:	08 f4       	brcc	.+2      	; 0x654 <__gesf2+0x8>
 652:	8f ef       	ldi	r24, 0xFF	; 255
 654:	08 95       	ret

00000656 <__mulsf3>:
 656:	0e 94 3e 03 	call	0x67c	; 0x67c <__mulsf3x>
 65a:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_round>
 65e:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_pscA>
 662:	38 f0       	brcs	.+14     	; 0x672 <__mulsf3+0x1c>
 664:	0e 94 a8 03 	call	0x750	; 0x750 <__fp_pscB>
 668:	20 f0       	brcs	.+8      	; 0x672 <__mulsf3+0x1c>
 66a:	95 23       	and	r25, r21
 66c:	11 f0       	breq	.+4      	; 0x672 <__mulsf3+0x1c>
 66e:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_inf>
 672:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_nan>
 676:	11 24       	eor	r1, r1
 678:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_szero>

0000067c <__mulsf3x>:
 67c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fp_split3>
 680:	70 f3       	brcs	.-36     	; 0x65e <__mulsf3+0x8>

00000682 <__mulsf3_pse>:
 682:	95 9f       	mul	r25, r21
 684:	c1 f3       	breq	.-16     	; 0x676 <__mulsf3+0x20>
 686:	95 0f       	add	r25, r21
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	55 1f       	adc	r21, r21
 68c:	62 9f       	mul	r22, r18
 68e:	f0 01       	movw	r30, r0
 690:	72 9f       	mul	r23, r18
 692:	bb 27       	eor	r27, r27
 694:	f0 0d       	add	r31, r0
 696:	b1 1d       	adc	r27, r1
 698:	63 9f       	mul	r22, r19
 69a:	aa 27       	eor	r26, r26
 69c:	f0 0d       	add	r31, r0
 69e:	b1 1d       	adc	r27, r1
 6a0:	aa 1f       	adc	r26, r26
 6a2:	64 9f       	mul	r22, r20
 6a4:	66 27       	eor	r22, r22
 6a6:	b0 0d       	add	r27, r0
 6a8:	a1 1d       	adc	r26, r1
 6aa:	66 1f       	adc	r22, r22
 6ac:	82 9f       	mul	r24, r18
 6ae:	22 27       	eor	r18, r18
 6b0:	b0 0d       	add	r27, r0
 6b2:	a1 1d       	adc	r26, r1
 6b4:	62 1f       	adc	r22, r18
 6b6:	73 9f       	mul	r23, r19
 6b8:	b0 0d       	add	r27, r0
 6ba:	a1 1d       	adc	r26, r1
 6bc:	62 1f       	adc	r22, r18
 6be:	83 9f       	mul	r24, r19
 6c0:	a0 0d       	add	r26, r0
 6c2:	61 1d       	adc	r22, r1
 6c4:	22 1f       	adc	r18, r18
 6c6:	74 9f       	mul	r23, r20
 6c8:	33 27       	eor	r19, r19
 6ca:	a0 0d       	add	r26, r0
 6cc:	61 1d       	adc	r22, r1
 6ce:	23 1f       	adc	r18, r19
 6d0:	84 9f       	mul	r24, r20
 6d2:	60 0d       	add	r22, r0
 6d4:	21 1d       	adc	r18, r1
 6d6:	82 2f       	mov	r24, r18
 6d8:	76 2f       	mov	r23, r22
 6da:	6a 2f       	mov	r22, r26
 6dc:	11 24       	eor	r1, r1
 6de:	9f 57       	subi	r25, 0x7F	; 127
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	9a f0       	brmi	.+38     	; 0x70a <__mulsf3_pse+0x88>
 6e4:	f1 f0       	breq	.+60     	; 0x722 <__mulsf3_pse+0xa0>
 6e6:	88 23       	and	r24, r24
 6e8:	4a f0       	brmi	.+18     	; 0x6fc <__mulsf3_pse+0x7a>
 6ea:	ee 0f       	add	r30, r30
 6ec:	ff 1f       	adc	r31, r31
 6ee:	bb 1f       	adc	r27, r27
 6f0:	66 1f       	adc	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	91 50       	subi	r25, 0x01	; 1
 6f8:	50 40       	sbci	r21, 0x00	; 0
 6fa:	a9 f7       	brne	.-22     	; 0x6e6 <__mulsf3_pse+0x64>
 6fc:	9e 3f       	cpi	r25, 0xFE	; 254
 6fe:	51 05       	cpc	r21, r1
 700:	80 f0       	brcs	.+32     	; 0x722 <__mulsf3_pse+0xa0>
 702:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_inf>
 706:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_szero>
 70a:	5f 3f       	cpi	r21, 0xFF	; 255
 70c:	e4 f3       	brlt	.-8      	; 0x706 <__mulsf3_pse+0x84>
 70e:	98 3e       	cpi	r25, 0xE8	; 232
 710:	d4 f3       	brlt	.-12     	; 0x706 <__mulsf3_pse+0x84>
 712:	86 95       	lsr	r24
 714:	77 95       	ror	r23
 716:	67 95       	ror	r22
 718:	b7 95       	ror	r27
 71a:	f7 95       	ror	r31
 71c:	e7 95       	ror	r30
 71e:	9f 5f       	subi	r25, 0xFF	; 255
 720:	c1 f7       	brne	.-16     	; 0x712 <__mulsf3_pse+0x90>
 722:	fe 2b       	or	r31, r30
 724:	88 0f       	add	r24, r24
 726:	91 1d       	adc	r25, r1
 728:	96 95       	lsr	r25
 72a:	87 95       	ror	r24
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret

00000730 <__fp_inf>:
 730:	97 f9       	bld	r25, 7
 732:	9f 67       	ori	r25, 0x7F	; 127
 734:	80 e8       	ldi	r24, 0x80	; 128
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	08 95       	ret

0000073c <__fp_nan>:
 73c:	9f ef       	ldi	r25, 0xFF	; 255
 73e:	80 ec       	ldi	r24, 0xC0	; 192
 740:	08 95       	ret

00000742 <__fp_pscA>:
 742:	00 24       	eor	r0, r0
 744:	0a 94       	dec	r0
 746:	16 16       	cp	r1, r22
 748:	17 06       	cpc	r1, r23
 74a:	18 06       	cpc	r1, r24
 74c:	09 06       	cpc	r0, r25
 74e:	08 95       	ret

00000750 <__fp_pscB>:
 750:	00 24       	eor	r0, r0
 752:	0a 94       	dec	r0
 754:	12 16       	cp	r1, r18
 756:	13 06       	cpc	r1, r19
 758:	14 06       	cpc	r1, r20
 75a:	05 06       	cpc	r0, r21
 75c:	08 95       	ret

0000075e <__fp_round>:
 75e:	09 2e       	mov	r0, r25
 760:	03 94       	inc	r0
 762:	00 0c       	add	r0, r0
 764:	11 f4       	brne	.+4      	; 0x76a <__fp_round+0xc>
 766:	88 23       	and	r24, r24
 768:	52 f0       	brmi	.+20     	; 0x77e <__fp_round+0x20>
 76a:	bb 0f       	add	r27, r27
 76c:	40 f4       	brcc	.+16     	; 0x77e <__fp_round+0x20>
 76e:	bf 2b       	or	r27, r31
 770:	11 f4       	brne	.+4      	; 0x776 <__fp_round+0x18>
 772:	60 ff       	sbrs	r22, 0
 774:	04 c0       	rjmp	.+8      	; 0x77e <__fp_round+0x20>
 776:	6f 5f       	subi	r22, 0xFF	; 255
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	8f 4f       	sbci	r24, 0xFF	; 255
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
